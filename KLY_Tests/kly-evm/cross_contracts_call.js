import { Transaction } from '@ethereumjs/tx'
import { Common } from '@ethereumjs/common'
import Web3 from 'web3'

//___________________________________ CONSTANTS POOL ___________________________________

const web3 = new Web3(
    'http://localhost:7332/kly_evm_rpc/9GQ46rqY238rk2neSwgidap9ww5zbAN4dyqyC7j5ZnBK'
)

// KLY-EVM

const common = Common.custom(
    { name: 'KLYNTAR', networkId: '0x1CA3', chainId: '0x1CA3' },
    { hardfork: 'merge' }
)

const evmAccount0 = {
    address: '0x069bdf66961ce2D38eBe48DD2E095f2c8015ac82',
    privateKey: Buffer.from(
        'a06d4e98075df20d90972dfec819a8711c8d245423f9d3a13f809505f81fbcb8',
        'hex'
    )
}

const evmAccount1 = {
    address: '0x407d73d8a49eeb85d32cf465507dd71d507100c1',
    privateKey: Buffer.from(
        '43818ec87b33c38d65fe835e3143010fe08bce8da962aab996dc239229a6b574',
        'hex'
    )
}

const CALLER_CONTRACT_BYTECODE =
    '0x608060405234801561001057600080fd5b506105a8806100206000396000f3fe6080604052600436106100295760003560e01c806387ba61791461002e578063ff00726c1461004a575b600080fd5b6100486004803603810190610043919061033a565b610066565b005b610064600480360381019061005f919061033a565b6101a7565b005b6000808273ffffffffffffffffffffffffffffffffffffffff163461138890607b6040516024016100979190610416565b6040516020818303038152906040527f24ccab8f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161012191906104b5565b600060405180830381858888f193505050503d806000811461015f576040519150601f19603f3d011682016040523d82523d6000602084013e610164565b606091505b50915091507f13848c3e38f8886f3f5d2ad9dff80d8092c2bbb8efd5b887a99c2c6cfc09ac2a828260405161019a929190610542565b60405180910390a1505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16346040516024016040516020818303038152906040527f1dcc85ae000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161025291906104b5565b60006040518083038185875af1925050503d806000811461028f576040519150601f19603f3d011682016040523d82523d6000602084013e610294565b606091505b50915091507f13848c3e38f8886f3f5d2ad9dff80d8092c2bbb8efd5b887a99c2c6cfc09ac2a82826040516102ca929190610542565b60405180910390a1505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610307826102dc565b9050919050565b610317816102fc565b811461032257600080fd5b50565b6000813590506103348161030e565b92915050565b6000602082840312156103505761034f6102d7565b5b600061035e84828501610325565b91505092915050565b600082825260208201905092915050565b7f63616c6c20666f6f000000000000000000000000000000000000000000000000600082015250565b60006103ae600883610367565b91506103b982610378565b602082019050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006104006103fb6103f6846103c4565b6103db565b6103ce565b9050919050565b610410816103e5565b82525050565b6000604082019050818103600083015261042f816103a1565b905061043e6020830184610407565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561047857808201518184015260208101905061045d565b60008484015250505050565b600061048f82610444565b610499818561044f565b93506104a981856020860161045a565b80840191505092915050565b60006104c18284610484565b915081905092915050565b60008115159050919050565b6104e1816104cc565b82525050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600061051482610444565b61051e81856104e7565b935061052e81856020860161045a565b610537816104f8565b840191505092915050565b600060408201905061055760008301856104d8565b81810360208301526105698184610509565b9050939250505056fea264697066735822122022aa4f3c9db7e0939ea5dd2023bdfe3bedd2e825e8fcc1815417dc87c75cce1464736f6c63430008110033'

const RECEIVER_CONTRACT_BYTECODE =
    '0x608060405234801561001057600080fd5b50610515806100206000396000f3fe6080604052600436106100225760003560e01c806324ccab8f1461005e57610023565b5b7f59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b58323334604051610054929190610197565b60405180910390a1005b61007860048036038101906100739190610359565b61008e565b60405161008591906103b5565b60405180910390f35b60007f59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b58323334856040516100c39392919061043e565b60405180910390a16001826100d891906104ab565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061010b826100e0565b9050919050565b61011b81610100565b82525050565b6000819050919050565b61013481610121565b82525050565b600082825260208201905092915050565b7f46616c6c6261636b207761732063616c6c656400000000000000000000000000600082015250565b600061018160138361013a565b915061018c8261014b565b602082019050919050565b60006060820190506101ac6000830185610112565b6101b9602083018461012b565b81810360408301526101ca81610174565b90509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61023a826101f1565b810181811067ffffffffffffffff8211171561025957610258610202565b5b80604052505050565b600061026c6101d3565b90506102788282610231565b919050565b600067ffffffffffffffff82111561029857610297610202565b5b6102a1826101f1565b9050602081019050919050565b82818337600083830152505050565b60006102d06102cb8461027d565b610262565b9050828152602081018484840111156102ec576102eb6101ec565b5b6102f78482856102ae565b509392505050565b600082601f830112610314576103136101e7565b5b81356103248482602086016102bd565b91505092915050565b61033681610121565b811461034157600080fd5b50565b6000813590506103538161032d565b92915050565b600080604083850312156103705761036f6101dd565b5b600083013567ffffffffffffffff81111561038e5761038d6101e2565b5b61039a858286016102ff565b92505060206103ab85828601610344565b9150509250929050565b60006020820190506103ca600083018461012b565b92915050565b600081519050919050565b60005b838110156103f95780820151818401526020810190506103de565b60008484015250505050565b6000610410826103d0565b61041a818561013a565b935061042a8185602086016103db565b610433816101f1565b840191505092915050565b60006060820190506104536000830186610112565b610460602083018561012b565b81810360408301526104728184610405565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104b682610121565b91506104c183610121565b92508282019050808211156104d9576104d861047c565b5b9291505056fea2646970667358221220b0eeeb0bfe4a244542a9822c327bba180a729e871184eaaaae80e54ec76fd65e64736f6c63430008110033'

let EVM_CONTRACT_DEPLOY = async () => {
    web3.eth.getTransactionCount(evmAccount0.address, async (err, txCount) => {
        if (err) return

        console.log(txCount)

        // Build a transaction
        let txObject = {
            from: evmAccount0.address,

            nonce: web3.utils.toHex(txCount),

            //Set enough limit and price for gas
            gasLimit: web3.utils.toHex(8000000),

            gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),

            //Set contract bytecode
            data: CALLER_CONTRACT_BYTECODE
        }

        //Choose custom network
        let tx = Transaction.fromTxData(txObject, { common }).sign(evmAccount0.privateKey)

        let raw = '0x' + tx.serialize().toString('hex')

        // console.log('Transaction(HEX) ———> ',raw)

        //Broadcast the transaction
        web3.eth.sendSignedTransaction(raw, (err, txHash) =>
            console.log(err ? `Oops,some has been occured ${err}` : `Success ———> ${txHash}`)
        )
    })
}

EVM_CONTRACT_DEPLOY()

// let EVM_CONTRACT_CALL=async()=>{

//     // Make a checkpoint by call appropriate method of previously deployed contract

//     const nextCheckpoint = `Hello, it's the second checkpoint`

//     const TEST_KLY_EVM_CONTRACT = new web3.eth.Contract([{"inputs":[{"internalType":"string","name":"initialCheckpoint","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"payload","type":"string"},{"indexed":false,"internalType":"uint256","name":"blocktime","type":"uint256"}],"name":"Checkpoint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"payload","type":"string"},{"indexed":false,"internalType":"uint256","name":"blocktime","type":"uint256"}],"name":"SkipProcedure","type":"event"},{"inputs":[{"internalType":"string","name":"aggregatedCheckpoint","type":"string"}],"name":"checkpoint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"skipMetadata","type":"string"}],"name":"skip","outputs":[],"stateMutability":"nonpayable","type":"function"}])

//     web3.eth.getTransactionCount(evmAccount0.address,async(err,txCount)=>{

//         if(err) return

//         // Build a transaction
//         let txObject = {

//             from:evmAccount0.address,

//             to:'0x49fb5fccd2f0cf7764b4a469669c2d400006d203', // our contract address

//             nonce:web3.utils.toHex(txCount),

//             //Set enough limit and price for gas
//             gasLimit: web3.utils.toHex(100000),

//             gasPrice: web3.utils.toHex(web3.utils.toWei('10','gwei')),

//             data:TEST_KLY_EVM_CONTRACT.methods.checkpoint(nextCheckpoint).encodeABI()

//         }

//         //Choose custom network
//         let tx = Transaction.fromTxData(txObject,{common}).sign(evmAccount0.privateKey)

//         let raw = '0x' + tx.serialize().toString('hex')

//         console.log('Transaction(HEX) ———> ',raw)

//         //Broadcast the transaction
//         web3.eth.sendSignedTransaction(raw,(err,txHash) => console.log(err?`Oops,some has been occured ${err}`:`Success ———> ${txHash}`))

//     })

// }

// EVM_CONTRACT_CALL()
