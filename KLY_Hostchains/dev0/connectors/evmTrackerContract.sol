//SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;


//______________________________________________________________IMPORT SECTION______________________________________________________________


/**
 * 
 * @title KLYNTAR
 * @dev @Vlad@ Chernenko
 * 
 *  Created for pack dev0
 *
 *  Simplest contract to set checkpoints in EVM compatible chains to track VM logs and make sure symbiote state is valid and OK
 *
 *
 */
 
contract Main {
    
    string public checkpoint="Poyekhali!@Y.A.Gagarin"; //such checkpoints will be published as "data" via transaction. We'll not store full checkpoint,we will get txid via VM log and read the data from tx
        
    event Checkpoint();

    
//_______________________________________________________SINGLE ONE SIMPLE FUNCTION_________________________________________________________

    function change(string memory _aggregatedCheckpoint) public {
    
        //Emit event to be tracked by VM
        emit Checkpoint();
        
    }
      
}

/*




 ██╗ ██╗      █████╗ ██████╗ ██╗     ██╗ ██╗ 
████████╗    ██╔══██╗██╔══██╗██║    ████████╗
╚██╔═██╔╝    ███████║██████╔╝██║    ╚██╔═██╔╝
████████╗    ██╔══██║██╔══██╗██║    ████████╗
╚██╔═██╔╝    ██║  ██║██████╔╝██║    ╚██╔═██╔╝
 ╚═╝ ╚═╝     ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝ ╚═╝ 




[
	{
		"anonymous": false,
		"inputs": [],
		"name": "Checkpoint",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_aggregatedCheckpoint",
				"type": "string"
			}
		],
		"name": "change",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "checkpoint",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]




 ██╗ ██╗     ██████╗ ██╗   ██╗████████╗███████╗ ██████╗ ██████╗ ██████╗ ███████╗     ██╗ ██╗ 
████████╗    ██╔══██╗╚██╗ ██╔╝╚══██╔══╝██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝    ████████╗
╚██╔═██╔╝    ██████╔╝ ╚████╔╝    ██║   █████╗  ██║     ██║   ██║██║  ██║█████╗      ╚██╔═██╔╝
████████╗    ██╔══██╗  ╚██╔╝     ██║   ██╔══╝  ██║     ██║   ██║██║  ██║██╔══╝      ████████╗
╚██╔═██╔╝    ██████╔╝   ██║      ██║   ███████╗╚██████╗╚██████╔╝██████╔╝███████╗    ╚██╔═██╔╝
 ╚═╝ ╚═╝     ╚═════╝    ╚═╝      ╚═╝   ╚══════╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝     ╚═╝ ╚═╝ 




0x60806040526040518060400160405280601681526020017f506f79656b68616c692140592e412e4761676172696e000000000000000000008152506000908051906020019061004f929190610062565b5034801561005c57600080fd5b50610166565b82805461006e90610105565b90600052602060002090601f01602090048101928261009057600085556100d7565b82601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e9565b5090565b6000600282049050600182168061011d57607f821691505b6020821081141561013157610130610137565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610416806101756000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c1dcab141461003b578063c2c4c5c114610057575b600080fd5b610055600480360381019061005091906101a2565b610075565b005b61005f6100a4565b60405161006c9190610224565b60405180910390f35b7f645b050443403fa34bc992a1617954b1b340b2fba133227ee552911014e7fbb360405160405180910390a150565b600080546100b1906102fa565b80601f01602080910402602001604051908101604052809291908181526020018280546100dd906102fa565b801561012a5780601f106100ff5761010080835404028352916020019161012a565b820191906000526020600020905b81548152906001019060200180831161010d57829003601f168201915b505050505081565b60006101456101408461026b565b610246565b905082815260208101848484011115610161576101606103c0565b5b61016c8482856102b8565b509392505050565b600082601f830112610189576101886103bb565b5b8135610199848260208601610132565b91505092915050565b6000602082840312156101b8576101b76103ca565b5b600082013567ffffffffffffffff8111156101d6576101d56103c5565b5b6101e284828501610174565b91505092915050565b60006101f68261029c565b61020081856102a7565b93506102108185602086016102c7565b610219816103cf565b840191505092915050565b6000602082019050818103600083015261023e81846101eb565b905092915050565b6000610250610261565b905061025c828261032c565b919050565b6000604051905090565b600067ffffffffffffffff8211156102865761028561038c565b5b61028f826103cf565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b82818337600083830152505050565b60005b838110156102e55780820151818401526020810190506102ca565b838111156102f4576000848401525b50505050565b6000600282049050600182168061031257607f821691505b602082108114156103265761032561035d565b5b50919050565b610335826103cf565b810181811067ffffffffffffffff821117156103545761035361038c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea2646970667358221220af9e80d1e9de668e9dfd3ad7d349aa4f8cf7f8f01ea9417ecf5bb0bd1b2262b464736f6c63430008070033









*/